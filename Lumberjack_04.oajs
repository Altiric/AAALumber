/*
 * Script   : Altiric's Amazing Arborist
 * Author   : Altiric
 * Created  : May 20, 2022
 * Revised  : Same
 * Version  : 0.2
 * 
 * Usage:
 * -Run Autostart()
 * -Target a secure container, unless done previously
 * -Optionally target a pack animal, also goes to memory
 * -Enjoy
 * 
 * Revisions:
 *  v0.4
 *  -Rune travel! 
 *  ---Name your runic atlas' and rune books "harvest"
 *  ---Name your runes "home" or "bank". You can have multiple runes named "bank", and a random one will be chosen when a bank is visited.
 *  ---All other runes in each book will be visited and scanned for trees
 *  v0.3
 *  -Gump design is more modular, if you add to the harvestTable, the gump will grow where needed.
 *  -Added toggle for Bank or Secure storage
 *  -Added "Default Position" the script will want to be here everytime max weight is reached. ***I dont like this ***
 *  -Added custom timers, Adjustments to script timing now made from options gump
 *  -Modified all journal and text checks to clilocs, this should allow operation for any client language
 *  -Added "Minimize/Restore" button to gump, this is just cool lol
 *  -Created manual mode. While active, any tree you chop once will be harvested dry. Logs will be turned
 *   into boards and moved to a pack animal if one is set near max weight.
 *  v0.2
 *  -Added harvestTable, This allows you to easily add custom harvest woods/items
 *  -Created new gump/gui system that controls all aspects of the script now
 *  -Created file read/write system to store settings and logs for each lumberjack
 *  -Added Options panel to gui to get things set up
 *  v0.1
 *  -Created tree finder and ability to walk to and chop a tree
 *  -Added weight check to reduce logs to boards and pause when full
 *  -Added axe management support, have one equipped, etc
 *  -Added pack animal support, moves boards when full
 *  -Added secure container, now unloads pack animal when full
 */

const items = {
    logs    : '0x1BDD',
    boards  : '0x1BD7',
    axes    : '0xF47|0xF4B|0xF45|0xF43|0x13FB|0x1443|0x13B0|0xF49|0x48B2',
};

// const cliloc = 500493 : "not enough wood"};
    
const failedString = [
    Orion.GetCliLocString(500486),  // That is too far away
    Orion.GetCliLocString(500487),  // The axe must be equipped
    Orion.GetCliLocString(500489),  // You cant use an axe on that
    Orion.GetCliLocString(500499),  // You broke your axe
    Orion.GetCliLocString(500950),  // You cannot see that
    Orion.GetCliLocString(500497),  // Full Backpack
].join('|');    
//    Orion.GetCliLocString(500496),  // You hack at the three

//You can add/edit/remove custom harvested items here
const harvestTable = [
    { Name: 'ordinary', 		Color: '0x0478', Type: '0x1BDD|0x1BD7', Cliloc: 1072540},
    { Name: 'oak',      		Color: '0x07DA', Type: '0x1BDD|0x1BD7', Cliloc: 1072541},   
    { Name: 'ash',      		Color: '0x04A7', Type: '0x1BDD|0x1BD7', Cliloc: 1072542},
    { Name: 'yew',      		Color: '0x04A8', Type: '0x1BDD|0x1BD7', Cliloc: 1072543},
    { Name: 'bloodwood',		Color: '0x04AA', Type: '0x1BDD|0x1BD7', Cliloc: 1072544},
    { Name: 'heartwood',		Color: '0x04A9', Type: '0x1BDD|0x1BD7', Cliloc: 1072545},
    { Name: 'frostwood',		Color: '0x047F', Type: '0x1BDD|0x1BD7', Cliloc: 1072546},
	{ Name: 'brilliant amber', 	Color: '0x0035', Type: '0x1BDD|0x1BD7', Cliloc: 1072551},
	{ Name: 'luminecient fungi',Color: '0x0097', Type: '0x1BDD|0x1BD7', Cliloc: 1072550},
	{ Name: 'bark fragment', 	Color: '0x0097', Type: '0x1BDD|0x1BD7', Cliloc: 1072548},
	{ Name: 'switch', 			Color: '0x021E', Type: '0x1BDD|0x1BD7', Cliloc: 1072547},
    { Name: 'parasitic plant', 	Color: '0x003F', Type: '0x1BDD|0x1BD7', Cliloc: 1072549},
    { Name: 'crystal shard',    Color: '0x0000', Type: 'type', Cliloc: 1113756}
];

//Color table
const color = {
    label   : '0x002B',
    value   : '0x7EE',
	green 	: {light: '0x0046', norm: '0x0044', dark: '0x00A7'},
	blue	: {light: '0x0064', norm: '0x0062', dark: '0x00C5'},
	red		: {light: '0x0028', norm: '0x0026', dark: '0x0089'},
	orange	: {light: '0x002D', norm: '0x002B', dark: '0x008E'},
	purple	: {light: '0x001E', norm: '0x0017', dark: '0x007A'},
	yellow	: {light: '0x0037', norm: '0x0035', dark: '0x0098'},
	white	: {light: '0x7FA',  norm: '0x7EE',  dark: '0x7E2' }
};

const waitPuns = {
    1 : "Waiting...",
    2 : "Slacking",
    3 : "Making Puppies",
    4 : "\"Resting\"",
    5 : "Day dreaming",
};

const chopPuns = {
    1 : "Working that wood!",
    2 : "Taking long strokes",
};

// Global variables
var tree, trees, chopped = [];, var jack = loadJack();

function test(){
    var herd = Orion.FindTypeEx(0x00CF, any, ground);
    rerun:
        var sheep = herd.shift();
        Orion.WalkTo(sheep.X(), sheep.Y(), sheep.Z(), 2, 255, 1);
        if(herd.length > 0)
            continue rerun;
        
    Orion.Print"That was the last sheep");
}
        

// Main function
function Autostart(){
    Orion.SetGlobal('miniDisplay', 0);
    Orion.ClearJournal();
    Shared.RemoveVar('action');
    var harvestCliloc = harvestTable.map(function(cliloc){ return Orion.GetCliLocString(cliloc.Cliloc) }).join('|');
    display();
    
    while(Orion.Connected()){
        if(Player.Dead())
            ghostWait();
        
        if(jack.auto){        
            trees = getTrees();
            chopped = chopped.concat(trees.map(function(stTree){
                return stTree.X().toString() + stTree.Y().toString()
            }));
            if(trees.length < 1)
                chopped = [];
            
            harvest: do {
                tree = trees.shift();
                chop(tree);
                trees = trees.sort(function(a, b){
                    return Orion.GetDistance(a.X(), a.Y()) - Orion.GetDistance(b.X(), b.Y());
                });
                Orion.Wait(500);
            } while(trees);
        } else {
            if(Orion.InJournal(harvestCliloc+'|'+Orion.GetCliLocString(500496), 'my|sys')){
                Orion.ClearJournal();
                chop();
                setStatus(waitPuns[Orion.Random(0, waitPuns.length)]);
            }
        }
        Orion.Wait(500);
    }
}

function ghostWait(){
    Shared.SetVar('auto', false);
    setStatus("Well damn...");
    while(Player.Dead())
        Orion.Wait(1000);
    setStatus("aaand we're back!");
}

function chop(tree){
    if(tree && Orion.GetDistance(tree.x, tree.y) > 2 &&  jack.auto){
        Orion.Print(color.yellow.light, "Moving to Tree");
        Orion.WalkTo(tree.X(), tree.Y(), tree.Z(), 1, 255, 0);                        
    }
    
    setStatus(chopPuns[Orion.Random(0, chopPuns.length)]);
    while(!Orion.InJournal(Orion.GetCliLocString(500493), 'my|sys')){
        checkWeight();
        if(Orion.InJournal(failedString, 'my|sys'))
            break;
        if(tree)
            Orion.WaitTargetTile('tree', tree.x, tree.y, tree.z);
        else
            Orion.WaitTargetTile('lasttile');
        useAxe();
        Orion.Wait(jack.useitemdelay);
        Orion.CancelWaitTarget();
    }
}

const menu = Orion.CreateCustomGump(10000);
function display(){
    var serial=77777, height = (harvestTable.length*16)+40, width = 300;
    menu.Clear();
    menu.SetCallback('process');

    menu.AddPage(0);
        menu.AddResizepic(25, 25, 0x23F0, width, height);
        menu.AddResizepic((width-15), 45, 0x254E, 75, 115);
        menu.AddResizepic(0, 15, 0x24B8, (width+40), 30);
        menu.AddText(60, 20, color.white.light, "<H3>Altiric's Amazing Arborist</H3>", 500, 10001);
        menu.AddButton(30006, width, 15, 0x82E, 0x82F, 0x82E, 0x0000);
        menu.AddTooltip("Minimize");
        menu.AddButton(30000, (width-10), 55, 0x7D6, 0x7D8, 0x7D7, 0x0000, 0, 2);
        menu.AddTooltip("Load Options");
        menu.AddButton(30004, (width-10), 80, 0x7EB, 0x7ED, 0x7EC, 0x0000, 0, 3);
        menu.AddTooltip("View status of harvested goods");
        menu.AddResizepic((width-175), (height+10), 0x254E, 225, 25);
        menu.AddText((width-160), (height+15), color.yellow.norm, Shared.GetVar('action', "Ready to jack some wood!"), 250, 10017);
        menu.Update();
        
    menu.AddPage(1);
        menu.AddText(35, 50, color.label, "My Load:", 200, 10012);
        menu.AddColoredPolygone(120, 55, 100, 15, "#00007B");
        menu.AddColoredPolygone(120, 55, Player.Weight("%"), 15, Player.Weight("%") > 80 ? "#FF0000" : "#0000FF");
        menu.AddText(160, 52, color.yellow.light, "{weight%}%", 300, 10013);
        
        if(Player.Followers() > 0){
            menu.AddText(35, 70, color.label, "Followers Detected", 200, 10016);
            menu.AddButton(30007, 150, 73, 0x845, 0x846, 0x845, 0x0000);
            menu.AddTooltip("Set Pack Animal");
        }
        
        if(jack.hasOwnProperty("pet") && Orion.FindObject(jack.pet.serial)){
            var packWeightP = 86;
            menu.AddText(35, 70, color.label, "Pets Load:", 200, 10014);
            menu.AddColoredPolygone(120, 75, 100, 15, "#00007B");
            menu.AddColoredPolygone(120, 75, packWeightP, 15, packWeightP > 80 ? "#FF0000" : "#0000FF");
            menu.AddText(160, 72, color.yellow.light, packWeightP+"%", 50, 10015);
        }
        menu.Update();
        
    menu.AddPage(2);        
        menu.AddText(35, 50, color.label, "Default Position", 200, 10010);
        menu.AddGumpPic(140, 50, 0x9C5, 0x0000);
        menu.AddText(165, 50, color.value, "<small>"+Orion.XYToSextant(jack.secure.x, jack.secure.y)+"</small>", 300, 10011);
        menu.AddButton(40000, 150, 53, 0x4B9, 0x4BA, 0x4B9, 0x0000);
        menu.AddTooltip("Set Secure/Bank WalkTo Location");
        
        menu.AddText(35, 70, color.label, "Container:", 200, 10002);
        menu.AddComboBox(40001, 150, 70, '0xBB8', 0, '0xBB8', 85, 0);
        menu.AddComboBoxText("Bank", 0, jack.container == "Bank" ? 1 : 0);
        menu.AddComboBoxText("Secure", 0, jack.container == "Secure" ? 1 : 0);
        menu.AddButton(30008, 5, 93, 0x00D0, 0x00D0, 0x00D1, 0x0000);
        
        menu.AddText(35, 90, color.label, "Use Item Delay", 200, 10005);
        menu.AddResizepic(150, 90, '0x0BB8', 90, 22);
        menu.AddMinMaxButtons(60000, 200, 91, '0x0037', 0, 500, 5000, jack.useitemdelay);
        menu.SetTextParameters(1, 'LeftCenter');
        menu.AddTooltip("Adjust delay between Using objects (ms)");
        
        menu.AddText(35, 110, color.label, "Move Item Delay", 200, 10006);
        menu.AddResizepic(150, 110, '0x0BB8', 90, 22);
        menu.AddMinMaxButtons(60001, 200, 111, '0x0037', 0, 500, 5000, jack.useitemdelay);
        menu.SetTextParameters(1, 'LeftCenter');
        menu.AddTooltip("Adjust delay between Moving objects (ms)");
  
        menu.AddButton(30001, (width-10), 55, 0xEE, 0XF0, 0XEF, 0X0000);
        menu.AddTooltip("Apply Settings");
        menu.AddButton(30002, (width-10), 80, 0xF4, 0xF6, 0xF5, 0x0000);
        menu.AddTooltip("Restore Defaults");
        menu.AddButton(30003, (width-10), 105, 0xF1, 0xF3, 0xF2, 0x0000, 0, 1);
        menu.AddTooltip("Back to Mainpage");
        menu.Update();
    
    menu.AddPage(3);
        menu.AddButton(30000, (width-10), 55, 0x7D6, 0x7D8, 0x7D7, 0x0000, 0, 2);
        menu.AddTooltip("Load Options");
        var y = 50;
        harvestTable.forEach(function(wood, index){
            if(index % 2 == 0){
                menu.AddGumpPic(30, (index*16)+50, 0x145D, 0x0000);
                menu.AddGumpPic(42, (index*16)+50, 0x145E, 0x0000, serial++, 0x0000, 110, 16);
                menu.AddGumpPic(150, (index*16)+50, 0x145E, 0x3AC, serial++, 0x3AC, 50, 16);
                menu.AddGumpPic(200, (index*16)+50, 0x145E, 0x0000, serial++, 0x0000, 15, 16);
                menu.AddGumpPic(215, (index*16)+50, 0x145E, 0x3AC, serial++, 0x3AC, 50, 16);
                menu.AddGumpPic(260, (index*16)+50, 0x145F, 0x0000);
            }
            menu.AddText(35, (index*16)+47, wood.Color, wood.Name, 110, serial++);
            menu.AddText(155, (index*16)+47, color.value, jack.count[index].run, 45, serial++);
            menu.AddText(220, (index*16)+47, color.value, jack.count[index].total, 45, serial++);
        });
        
        menu.AddButton(30005, (width-10), 105, 0x817, 0x819, 0x818, 0x0000, 0, 1);
        menu.AddTooltip("Back to Mainpage");
        menu.Update();
}

function process(_hidden){
    const button = CustomGumpResponse.ReturnCode(), jack = loadJack();
    var mini = Orion.CreateCustomGump(200);
    
    switch(button){
        case 30001: // Apply Settings
            if(CustomGumpResponse.Slider(60000) > 0)
                jack.useitemdelay = CustomGumpResponse.Slider(60000);
            if(CustomGumpResponse.Slider(60001) > 0)
                jack.moveitemdelay = CustomGumpResponse.Slider(60001);
            if(CustomGumpResponse.ComboBox(40001) > 0)
                jack.container = CustomGumpResponse.ComboBox(40001) == 0 ? "Bank" : "Secure";
            writeJack(jack);
            menu.SetPage(1);
            menu.Update();
        break;
        case 30002: // Restore Defaults
            jack.useitemdelay   = 1200;
            jack.moveitemdelay  = 1200;
            jack.container      = "Bank";
        break;
        case 30006:  // Minimize
            menu.Close();
            Orion.SetGlobal('miniDisplay', true);
            miniDisplay();
        break;
        case 30007: // Set Pack Animal
            setStatus("Select your Pack Animal");
            Orion.WaitForAddObject('object');
            var obj = Orion.FindObject('object');
            jack.pet = {name: obj.Name(), serial: obj.Serial()};
            writeJack(jack);
            display();
        break;
        case 30009: // Restore Main display
            mini.Close();
            Orion.SetGlobal('miniDisplay', 0);
            display();
        break;
        case 4000: // Toggle Bank/Secure
            menu.AddText(165, 70, color.value, "<small>"+Orion.XYToSextant(jack.secure.x, jack.secure.y)+"</small>", 300, 10011);
            if(CustomGumpResponse.ComboBox(40001) == 1){
                setStatus("Choose your secure container");
                Orion.WaitForAddObject('object');
                var obj = Orion.FindObject('object');
                jack.secure = {serial: obj.Serial(), x: obj.X(), y: obj.Y(), z: obj.Z()};
                writeJack(jack);
            } else {
                jack.secure = {serial: Player.BankSerial(), x: Player.X(), y: Player.Y(), z: Player.Z()};
            }
            menu.Update()
            writeJack(jack);
        break;

        case 40002: // Set pack animal
            setStatus("Select your Pack Animal");
            Orion.WaitForAddObject('object');
            var obj = Orion.FindObject('object');
            jack.pet = {name: obj.Name(), serial: obj.Serial()};
            menu.AddText(115, 130, color.value, obj.Name(), 150, 10009);
            menu.Update();
            writeJack(jack);
        break;
        default:
            Orion.Print("Unknown button, pausing for now");
            Orion.PauseScript();
    }
}

function setStatus(txt){
    Shared.AddVar('action', txt);
    if(Orion.GetGlobal('miniDisplay').length > 1){
        mini.AddText(60, 68, color.yellow.norm, txt, 200, 10019);
        mini.Update();
    } else {
        var height = (harvestTable.length*16)+40
        menu.AddText((300-160), (height+15), color.yellow.norm, txt, 250, 10017);
        menu.Update();
    }
}

function findBanker(){
    var mobiles = Orion.FindTypeEx(any, any, ground, '', 22, 'invulnerable').filter(function(mob){
        return mob.Name().match(/The\sBanker/i) || mob.Properties().match(/The\sVault\sManager/i);
    });
    if(mobiles)
        return mobiles.shift();
    return false;
}

// Keeps weight in check for you and pack animal
function checkWeight(_hidden){
    if(Player.Weight() != Shared.GetVar('cWeight', 0)){
        Shared.AddVar('cWeight', Player.Weight());
        if(Orion.GetGlobal('miniDisplay').length > 1){
            mini.AddColoredPolygone(35, 27, Player.Weight("%"), 5, Player.Weight("%") > 80 ? "#FF0000" : "#0000FF");
            mini.Update();
        } else {
            menu.AddColoredPolygone(120, 55, Player.Weight("%"), 15, Player.Weight("%") > 80 ? "#FF0000" : "#0000FF");
            menu.Update();
        }
    }
    if(Player.Weight("%") > 90){
        setStatus("Mill'er Time");
        Orion.FindTypeEx(items['logs'], any, backpack).forEach(function(log){
            Orion.AddWaitTargetObject(log.Serial());
            if(!Orion.UseType(items['axes']))
                Orion.CancelWaitTarget();
            Orion.Wait(jack.useitemdelay);
        });
        
        if(Player.Weight("%") > 80){
            if(jack.pet.serial){
                var pet = Orion.FindObject(jack.pet.serial);
                if(pet){
                    setStatus("Loading " +pet.Name());
                    var weight = ((pet.Properties().match(/Weight:\s(\d*)/i) || [])[1] || 0);
                    var space = 1600 - weight;
                    var boards = Orion.FindTypeEx(items['boards'], any, backpack);
                    if(Orion.Count(items['boards']) < space && weight < 1600){
                        Orion.Print(color.yellow.light, "Moving boards to " +pet.Name());
                        while(Orion.Count(items['boards']) > 0){
                            Orion.MoveItemType(items['boards'], any, backpack, 0, pet.Serial());
                            Orion.Wait(jack.moveitemdelay);
                        }
                    } else {
                        setStatus(pet.Name() +" gonna break!");
                        return;
                    }
                }
            } else {
                setStatus("Shit's getting heavy!");
                return;
            }
        }
        setStatus("Chopping");
    }
    return true;
}

// Drops off all harvested goods
function secureDrop(_hidden){
    setStatus("Going for a dump.");
    
    if(Orion.GetDistance(jack.secure.x, jack.secure.y) > 2){
        Orion.WalkTo(jack.secure.x, jack.secure.y, jack.secure.z, 1, 255, 1, 1);
        Orion.Wait(250);
    }
    
    if(jack.container == "Bank"){
        var banker = findBanker();
        if(!banker){
            setStatus("No Bankers Here");
            Orion.PauseScript();
        }
        if(banker.Distance() > 8){
            Orion.WalkTo(banker.X(), banker.Y(), banker.Z(), 7, 255, 0);
            Orion.Wait(250);
        }
        Orion.Say("Bank");
    } else {
        var secure = Orion.FindObject(jack.secure.serial);
        if(!secure){
            setStatus("Secure is missing");
            Orion.PauseScript();
        }
        if(secure.Distance() > 2){
            Orion.WalkTo(secure.X(), secure.Y(), secure.Z(), 1, 255, 0, 1);
            Orion.Waot(250);
        }
        Orion.UseObject(jack.secure.serial);
    }
    Orion.WaitForContainerGump();
    Orion.Wait(jack.useitemdelay);
    
    if(jack.pet.serial){
        setStatus("Unloading " +jack.pet.name);
        Orion.RequestContextMenu(jack.pet.serial);
        Orion.WaitContextMenuID(jack.pet.serial, 508);
        Orion.WaitForContainerGump();
        Orion.Wait(jack.useitemdelay);
        Orion.FindTypeEx(any, any, lastcontainer).forEach(function(item){
            Orion.MoveItem(item.Serial(), 0, jack.container == "Bank" ? Player.BankSerial() : jack.secure.serial);
            Orion.Wait(jack.moveitemdelay);
        });
    }
    
    setStatus("Unloading Yourself");
    Orion.FindTypeEx(items['harvest']+'|'+items['boards'], any, backpack).forEach(function(item){
        Orion.MoveItem(item.Serial(), 0, secure.serial);
        Orion.Wait(jack.useitemdelay);
    });
    if(Orion.GetDistance(tree.X(), tree.Y()) > 75)
        trees = getTrees();
}
 
// Finds trees in the area
function getTrees(_hidden){
    return Orion.GetTilesInRect('tree', Player.X()-12, Player.Y()-12, Player.X()+12, Player.Y()+12).filter(function(tree){
            return chopped.indexOf(tree.X().toString() + tree.Y().toString()) == -1;
        }).sort(function(a, b){
            return Orion.GetDistance(a.X(), a.Y()) - Orion.GetDistance(b.X(), b.Y());
        });
}

function useAxe(){
	if(Orion.HaveTarget())
		Orion.CancelTarget();
    var held = Orion.ObjAtLayer('LeftHand') ? Orion.ObjAtLayer('LeftHand') : Orion.ObjAtLayer('RightHand');
	if(!held){
        if(Orion.FindType(items['axes'], any, backpack)){
            Orion.EquipT(items['axes'], any, backpack);
            Orion.Wait('moveitemdelay');
            held = Orion.ObjAtLayer('LeftHand') ? Orion.ObjAtLayer('LeftHand') : Orion.ObjAtLayer('RightHand');
        } else {
            setStatus("Could not find an Axe, pausing.");
            Orion.PauseScript();
        }
    }
	if(Orion.UseType(items['axes'], any, self))
        return;
    else {
        setStatus("Could not find an Axe, pausing.");
        Orion.PauseScript();
    }
}

function writeJack(data){
    var file = Orion.NewFile();
    file.Open(Player.Serial()+'.jack');
    file.Write(JSON.stringify(data, 0, 4));
    file.Close();
}

function loadJack(_hidden){
    var file = Orion.NewFile(), data = [];
    file.Open(Player.Serial()+'.jack');
    var pfile = file.ReadAll();
    file.Close();
    if(pfile.length)
        return JSON.parse(pfile);
    var countList = JSON.stringify(harvestTable.map(function(elem){
        return {type: elem.Type, color: elem.Color, run: 0, total: 0};
    }));
    return {
        manual       : true,
        container    : "Bank",
        secure       : false,
        pet          : false,
        runebooks    : [],
        count        : JSON.parse(countList),
        custom       : {},
        useitemdelay : 1200,
        moveitemdelay: 1200
    };
}

var mini = Orion.CreateCustomGump(200);
function miniDisplay(){
    mini.Clear();
    mini.SetCallback('process');
    mini.AddResizepic(10, 10, 0x23F0, 175, 75);
    mini.AddResizepic(0, 0, 0x254E, 175, 22);
    mini.AddText(10, 0, color.white.light, "<h3>AAA Lumberjack");
    mini.AddButton(30009, 140, 0, 0x82E, 0x82F, 0x82E, 0x0000);
    mini.AddTooltip("Restore");
    mini.AddText(15, 20, color.label, "<small><i>W", 200, 10012);
    mini.AddColoredPolygone(35, 27, 100, 5, "#00007B");
    mini.AddColoredPolygone(35, 27, Player.Weight("%"), 5, Player.Weight("%") > 80 ? "#FF0000" : "#0000FF");

    if(jack.pet.serial && Orion.FindObject(jack.pet.serial)){
        var pet = Orion.FindObject(jack.pet.serial);
        var pw = ((pet.Properties().match(/Weight:\s(\d*)/i) || [])[1] || 0);
        var pwp = (pw/1600)*100;
        mini.AddText(15, 30, color.label, "<small><i>P", 200, 10018);
        mini.AddColoredPolygone(35, 37, 100, 5, "#00007B");
        mini.AddColoredPolygone(35, 37, pwp, 5, pwp > 80 ? "#FF0000" : "#0000FF");
    }
    mini.AddResizepic(50, 65, 0x254E, 150, 25);
    mini.AddText(60, 68, color.yellow.norm, Shared.GetVar('action', "Mini Display"), 200, 10019);
    mini.Update();
}
